// AUTOGENERATED FILE
// This file was generated from grammar_pdfTokens.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface PDFTokenizerActionDict<T> extends BaseActionDict<T> {
  pdf_token?: (this: NonterminalNode, arg0: IterationNode) => T;
  header?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: IterationNode) => T;
  direct_object_start?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: IterationNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  endobj?: (this: NonterminalNode, arg0: TerminalNode) => T;
  stream?: (this: NonterminalNode, arg0: TerminalNode) => T;
  endstream?: (this: NonterminalNode, arg0: TerminalNode) => T;
  dict_start?: (this: NonterminalNode, arg0: TerminalNode) => T;
  dict_end?: (this: NonterminalNode, arg0: TerminalNode) => T;
  array_start?: (this: NonterminalNode, arg0: TerminalNode) => T;
  array_end?: (this: NonterminalNode, arg0: TerminalNode) => T;
  name?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  valid_name_char?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  name_hex_escape?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  string_literal?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  string_literal_char?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  string_literal_escape?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  octal?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  octal_digit?: (this: NonterminalNode, arg0: TerminalNode) => T;
  escaped_eol?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  hex_string?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  indirect_ref?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: IterationNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  integer?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  real?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: TerminalNode, arg3: IterationNode) => T;
  bool?: (this: NonterminalNode, arg0: TerminalNode) => T;
  null?: (this: NonterminalNode, arg0: TerminalNode) => T;
  xref?: (this: NonterminalNode, arg0: TerminalNode) => T;
  xref_10entry?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode, arg5: NonterminalNode, arg6: NonterminalNode, arg7: NonterminalNode, arg8: NonterminalNode, arg9: NonterminalNode) => T;
  xref_5entry?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: NonterminalNode) => T;
  xref_entry?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: TerminalNode) => T;
  trailer?: (this: NonterminalNode, arg0: TerminalNode) => T;
  startxref?: (this: NonterminalNode, arg0: TerminalNode) => T;
  eof?: (this: NonterminalNode, arg0: TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  eol?: (this: NonterminalNode, arg0: TerminalNode) => T;
  delimiter?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  start_delimiter?: (this: NonterminalNode, arg0: TerminalNode) => T;
  end_delimiter?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ws_incl_eol?: (this: NonterminalNode, arg0: IterationNode) => T;
  ws_no_eol?: (this: NonterminalNode, arg0: IterationNode) => T;
}

export interface PDFTokenizerSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: PDFTokenizerActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: PDFTokenizerActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: PDFTokenizerActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: PDFTokenizerActionDict<T>): this;
}

export interface PDFTokenizerGrammar extends Grammar {
  createSemantics(): PDFTokenizerSemantics;
  extendSemantics(superSemantics: PDFTokenizerSemantics): PDFTokenizerSemantics;
}

declare const grammar: PDFTokenizerGrammar;
export default grammar;

