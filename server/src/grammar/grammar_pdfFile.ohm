// This material is based upon work supported by the Defense Advanced 
// Research Projects Agency (DARPA) under Contract No. HR001119C0079. 
// Any opinions, findings and conclusions or recommendations expressed 
// in this material are those of the author(s) and do not necessarily 
// reflect the views of the Defense Advanced Research Projects Agency 
// (DARPA). Approved for public release.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Original author: Ozzy Kirkby
// Author: Peter Wyatt
//
// Test online at: https://ohmjs.org/editor/
//
// https://ohmjs.org/docs/syntax-reference#syntactic-lexical:
// lowercase = lexical rule - whitespace NOT skipped
// uppercase = syntactic rule - whitespace IS skipped
//
// This grammar has to be VERY lenient to allow live editing of a PDF.
// Just define valid PDF objects and constructs but NOT overall file layout.
//
PDFObject {
  // pdf = header binary_marker? revision* 
    
  // File header
  header = "%PDF-" digit "." digit (~eol any)* eol
  
  // Binary file marker comment (4 bytes minimum)
  binary_marker = "%" "\x80".."\xFF" "\x80".."\xFF" "\x80".."\xFF" "\x80".."\xFF" (~eol any)* eol 

  // Revision 
  revision = body* xref* trailer? startxref eof

  // Body
  body = indirect_object_start | object | stream | indirect_object_end 
  
  // Parts of indirect objects - allows editing so extra lenient 
  indirect_object_start = ws_incl_eol* digit+ ws_incl_eol digit+ ws_incl_eol "obj" ws_incl_eol*
  indirect_object_end = ws_incl_eol* "endobj" ws_incl_eol 
  stream = ws_incl_eol* "stream" ws_incl_eol (~"endstream" any)* ws_incl_eol? "endstream" ws_incl_eol
    
  // PDF objects NOT incl. streams (i.e. things allowed as array elements or dict key values)
  object = indirect_ref | dictionary | array | string | name | number | bool | null
  
  // PDF dictionary - of key/value pairs
  dictionary = "<<" key_value_pair*  ws_incl_eol* ">>" ws_incl_eol* 
  key_value_pair = (ws_incl_eol* | &"/") name (ws_incl_eol* | &start_delimiter) object  
  
  // PDF arrays - empty arrays are valid
  array = "[" ((ws_incl_eol* | &start_delimiter) object)* ws_incl_eol* "]" (ws_incl_eol* | &delimiter)
  
  // PDF Name - empty name is valid. 2 digit hex codes preceded by '#'.
  name = "/" (~(delimiter | ws_incl_eol) (name_hex_escape | any))* 
  name_hex_escape = "#" hex_digit hex_digit 

  // PDF string literal - empty string is valid
  string = string_literal | hex_string
  string_literal = "(" (~")" (string_literal_escape | any))* ")" 
  string_literal_escape = "\\n" | "\\r" | "\\b" | "\\f" | "\\(" | "\\)" | "\\\\" | octal | escaped_eol 
  octal = "\\" octal_digit octal_digit octal_digit
  octal_digit = "0".."7"
  escaped_eol = "\\" eol 

  // PDF hex string - empty hex string is valid
  hex_string = "<" (hex_digit | ws_incl_eol)* ">"
  hex_digit = digit | "a".."f" | "A".."F"

  // indirect reference `<obj-num> <gen-num> R` (e.g. 12 0 R)
  indirect_ref = ws_incl_eol* digit+ ws_incl_eol digit+ ws_incl_eol "R"

  // PDF Numeric object - integer or real
  number = integer | real
  integer = ("+" | "-")? digit+
  real = ("+" | "-")? ((digit* "."? digit+) | (digit+ "."? digit*))

  // PDF Boolean object
  bool = "true" | "false"
  
  // PDF null object
  null = "null"

  // Conventional cross reference tables
  xref = ws_incl_eol* "xref" ws_incl_eol xref_subsection+
  xref_subsection = xref_subsection_marker xref_entry* 
  xref_subsection_marker = ws_no_eol? digit+ " " digit+ ws_incl_eol 
  xref_10entry = digit digit digit digit digit digit digit digit digit digit 
  xref_5entry  = digit digit digit digit digit 
  xref_entry = xref_10entry " " xref_5entry " " ("f" | "n") ws_incl_eol
  
  // trailer, startxref and %%EOF. %%EOF does not need EOL (as could be EOF)
  trailer = "trailer" ws_incl_eol dictionary ws_incl_eol*
  startxref = "startxref" ws_incl_eol digit+ ws_incl_eol*
  eof = "%%EOF" ws_incl_eol*
  
  // PDF comment - up to next EOL. Treat lexically as an object
  comment = "%" (~eol any)* eol
  
  // Specific PDF EOL sequences. No whitespace or delimiters.
  eol = "\r\n" | "\n" | "\r"
  
  // PDF delimiters NOT including whitespace, EOLs or comments.
  delimiter = start_delimiter | end_delimiter
  start_delimiter = "<<" | "<" | "[" | "(" | "%"
  end_delimiter = ">>" | ">" | "]" | ")"

  // PDF whitespace optinally including EOLs and comments. ISO 32000-2 Table 1. DO NOT USE Ohm.js's "space"!
  ws_incl_eol = (" " | "\t" | "\x0C" | "\x00" | "\r" | "\n" | comment)+
  ws_no_eol   = (" " | "\t" | "\x0C" | "\x00")+
}